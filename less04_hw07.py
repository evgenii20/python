'''
    lesson04_hw07
7. Реализовать генератор с помощью функции с ключевым словом yield,
создающим очередное значение. При вызове функции должен создаваться объект-генератор.

Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение
факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например,
факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''

''' Импорт библиотеки '''
# from math import factorial
'''Использование конструкции yield тесно связано с понятием генератора. Это итерируемый объект,
который можно использовать один раз, т. к. при использовании генератора значения не хранятся в
памяти, а формируются в процессе обращения к ним, по мере запроса. 
Оператор yield по назначению схож с оператором return , но возвращает генератор вместо значения.
<generator object generator at 0x000000C64E181138 >
Данный механизм может быть полезен в том случае, когда функция возвращает большой объем
данных, но использовать их нужно только единожды. При вызове функции с оператором yield
функция не выполняется, а возвращает объект-генератор, с которым далее можно выполнять
необходимые действия.
'''
def fact(n):
    f = 1
    '''Факториал "0" равен "1" '''
    if n == 0:
        yield f
    ''' "for i in n:" - TypeError: 'int' object is not iterable'''
    for i in range(1, n+1):
        f *= i #f = f * i
        yield f

n = int(input("Введите число факториал которого вы хотите узнать:\n"))
for el in fact(n):
    print(el)
